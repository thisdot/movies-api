# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: movies-api

frameworkVersion: '3'
useDotenv: true

plugins:
  # https://www.serverless.com/plugins/serverless-plugin-typescript - typescript must precede offline
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-offline
  - serverless-dotenv-plugin

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  profile: moviesApi
  deploymentMethod: direct
  runtime: nodejs18.x
  environment:
    CONTENTFUL_SPACE_ID: ${env:CONTENTFUL_SPACE_ID}
    CONTENTFUL_DELIVERY_API_TOKEN: ${env:CONTENTFUL_DELIVERY_API_TOKEN}
  httpApi:
    cors: true
    authorizers:
      simpleAuthorizerFunc:
        type: request
        identitySource: 
          - $request.header.Authorization
        functionName: customAuthorizer
  iam:
    role:
      statements:
        - Effect: Allow 
          Action:
            - lambda:InvokeFunction
          Resource: arn:aws:lambda:*:*:*

# The `functions` block defines what code to deploy
functions:
  # auth functions & APIs
  customAuthorizer:
    handler: src/handlers/auth/authorizer.handler

  getValidToken:
    handler: src/handlers/auth/getValidToken.handler
    events:
      - httpApi:
          path: /auth/token
          method: get

  # healthcheck - check status of the app
  healthcheck:
    handler: src/handlers/healthcheck.handler
    events:
      - httpApi:
          path: /healthcheck
          method: get

  # graphql
  graphql:
    handler: src/handlers/graphql.server
    events:
      - httpApi:
          path: /graphql
          method: post
      - httpApi:
          path: /graphql
          method: get
    environment:
      SLS_STAGE: ${sls:stage}

  # RESTful APIs
  moviesByGenre:
    handler: src/handlers/genres/moviesByGenre.handler
    events:
      - httpApi:
          path: /genres/movies
          method: get
          authorizer:
            name: simpleAuthorizerFunc
  movies:
    handler: src/handlers/movies/getMovies.handler
    events:
      - httpApi:
          path: /movies
          method: get
          authorizer:
            name: simpleAuthorizerFunc
  movieById:
    handler: src/handlers/movies/movieById.handler
    events:
      - httpApi:
          path: /movies/{id}
          method: get
          authorizer:
            name: simpleAuthorizerFunc
  movieTitles:
    handler: src/handlers/movies/getMovieTitles.handler
    events:
      - httpApi:
          path: /movies/titles
          method: get
          authorizer:
            name: simpleAuthorizerFunc
  genreById:
    handler: src/handlers/genres/genreById.handler
    events:
      - httpApi:
          path: /movies/genres/{id}
          method: get
          authorizer:
            name: simpleAuthorizerFunc
